# coding: utf-8

from backtestAnalytics import trmiAnalytics as ta
import sys
import os
import pandas as pd

# ARGUMENT
#  1: G5 or G20
#  2: CURRPAIR NAME
argvs=sys.argv
argc=len(argvs)
if argc != 5:
    print ('Usage: # python %s Target_Asset Number_of_Depth_for_DecisionTree start_from span' % argvs[0])
    quit()

#group=argvs[1]
target=argvs[1]
numDepth=int(argvs[2])
startFrom=int(argvs[3])
dataSpan=int(argvs[4])

trmiFiles = []
trmiGroup = []


trmiFiles = ['../sql/JP.trmi.ret', '../sql/US.trmi.ret', '../sql/FR.trmi.ret', '../sql/GB.trmi.ret', '../sql/DE.trmi.ret','../sql/CN.trmi.ret', '../sql/CA.trmi.ret','../sql/CL.trmi.ret', '../sql/BR.trmi.ret', '../sql/AU.trmi.ret', '../sql/EG.trmi.ret', '../sql/IN.trmi.ret', '../sql/IR.trmi.ret', '../sql/IQ.trmi.ret', '../sql/IL.trmi.ret', '../sql/IT.trmi.ret', '../sql/LY.trmi.ret', '../sql/MX.trmi.ret', '../sql/KP.trmi.ret', '../sql/RU.trmi.ret', '../sql/ZA.trmi.ret', '../sql/CH.trmi.ret', '../sql/AR.trmi.ret', '../sql/UA.trmi.ret', '../sql/COR.trmi.ret', '../sql/HOGS.trmi.ret', '../sql/CTTL.trmi.ret', '../sql/SOY1.trmi.ret', '../sql/WHT.trmi.ret']
trmiGroup=['JP', 'US', 'FR', 'GB', 'DE', 'CN', 'CA','CL', 'BR', 'AU', 'EG', 'IN', 'IR', 'IQ', 'IL', 'IT', 'LY', 'MX', 'KP', 'RU', 'ZA', 'CH', 'AR', 'UA', 'COR', 'HOGS', 'CTTL', 'SOY1', 'WHT']


if target == "Cc1":
    pfile='../sql/Cc1.prc.ret'
elif target == "Sc1":
    pfile='../sql/Sc1.prc.ret'
elif target == "Wc1":
    pfile='../sql/Wc1.prc.ret'
else:
    print ("No such currency pair supported")
    sys.exit()

topRank = []
btmRank = []
frdTopRank = []
frdBtmRank = []

plArray = []

count=0
asys = ta()



# LOAD TARGET PRICE
prcDF = asys.loadData(pfile, ',')
prcLen = len(prcDF)
prcName = prcDF.columns.values

count = 0


accPL = 0
for i in range(prcLen - startFrom - dataSpan + 1,prcLen - dataSpan + 1,dataSpan):
    # PRICE DATAFRAME CONSTRUCTION IN THE SPECIFIED RANGE
    prc2DF = prcDF[i:i + dataSpan]

    # TRMI DATAFRAME CONSTRUCTION IN THE SPECIFIC RANGE
    count = 0
    fwdCorrTop = []
    for tfile in trmiFiles:
        # LOAD TRMI FILES
        trmiDF = asys.loadData(tfile, ',')
        asys.setTrmiAsset(trmiGroup[count])
        trmiName =trmiDF.columns.values

        trmiArr = []
        priceArr = []
        for j in range(0,len(prc2DF)):
            # KET = windowTimeStamp in prc2DF2
            pKey = str(prc2DF['windowTimestamp'].iloc[j])
            # FIND TARGET windowTimestamp in TRMI DATAFRAME
            trmiTmp = trmiDF.loc[trmiDF['windowTimestamp'] == pKey]
            if len(trmiTmp) > 0: # FOUND TARGET windowTimestamp in TRMI DATAFRAME
                trmiArr.append(trmiTmp.iloc[0])
                priceArr.append(prc2DF.iloc[j])

        # RECONSTRUCT PRICE AND TRMI DATA FRAME WHICH IS TOTALLY MATCHING BY windowTimestamp
        prc3DF = pd.DataFrame(priceArr, columns=prcName)
        trmi2DF = pd.DataFrame(trmiArr, columns=trmiName)

        # OBTAIN FORWARD LOOKING CORRELATION INDICES
        fwdCorrArr = []
        fwdCorrArr = asys.getForwardLookingCorr(trmi2DF, prc3DF,5)
        fwdCorrTop.extend(fwdCorrArr[0])
        count = count + 1
        # END OF LOOP tfile

    TopRank = sorted(fwdCorrTop, reverse=True)
    if len(TopRank) == 0:
        print ('Skip, no range matching')
        continue

    country = []
    indexname = []
    for k in range(0,3):
        country.append(TopRank[k][1])
        indexname.append(TopRank[k][2].split('-')[1])


    # OBTAIN TOP 3 CORRELATION INDICES
    trmiIndices = []
    trmiNames = []
    for k in range(0,3):
        trmiTmp = asys.loadData(trmiFiles[trmiGroup.index(country[k])],',')
        trmiIndices.append(trmiTmp)
        trmiNames.append(trmiTmp.columns.values)

    prcDF1 = prcDF[i:i + (2 * dataSpan)]
    # windowTimestam MATCHING b/w prcDF1 and TOP 3 TRMI Correlated index
    trmiArr1 = []
    trmiArr2 = []
    trmiArr3 = []
    priceArr = []
    for j in range(0,len(prcDF1)):
        # KET = windowTimeStamp in prcDF1                                                                  
        pKey = str(prcDF1['windowTimestamp'].iloc[j])
        # FIND TARGET windowTimestamp in TRMI DATAFRAME                                                     
        trmiTmp1 = trmiIndices[0].loc[trmiDF['windowTimestamp'] == pKey]
        trmiTmp2 = trmiIndices[1].loc[trmiDF['windowTimestamp'] == pKey]
        trmiTmp3 = trmiIndices[2].loc[trmiDF['windowTimestamp'] == pKey]
        if len(trmiTmp1) > 0: # FOUND TARGET windowTimestamp in TRMI DATAFRAME                               
            trmiArr1.append(trmiTmp1.iloc[0])
            trmiArr2.append(trmiTmp2.iloc[0])
            trmiArr3.append(trmiTmp3.iloc[0])
            priceArr.append(prcDF1.iloc[j])

    # RECONSTRUCT PRICE AND TRMI DATA FRAME WHICH IS TOTALLY MATCHING BY windowTimestamp                    
    prcDF2 = pd.DataFrame(priceArr, columns=prcName)
    trmiDF1 = pd.DataFrame(trmiArr1, columns=trmiNames[0])
    trmiDF2 = pd.DataFrame(trmiArr2, columns=trmiNames[1])
    trmiDF3 = pd.DataFrame(trmiArr3, columns=trmiNames[2])

    #print (prcDF2)
    #print (trmiDF2)

    dataLen = len(prcDF2)
    # STUDY

    prc = prcDF2[0:dataSpan]
    trmi1 = trmiDF1[0:dataSpan][indexname[0]]
    trmi2 = trmiDF2[0:dataSpan][indexname[1]]
    trmi3 = trmiDF3[0:dataSpan][indexname[2]]


    ret = asys.getSupervisingData(prc,trmi1,trmi2,trmi3,numDepth,-1)
    lastTradePrice = prcDF2.iloc[dataSpan - 1]['lastPrice']
    nextTradePrice = prcDF2.iloc[dataSpan]['lastPrice']
    lastWindowTime = prcDF2.iloc[dataSpan- 1]['windowTimestamp']
    nextWindowTime = prcDF2.iloc[dataSpan]['windowTimestamp']
    pl = (nextTradePrice - lastTradePrice) * ret
    accPL = accPL + pl
    print (str(nextWindowTime) + ',' + str(ret[0]) + ',' + str(pl[0]) + ',' + str(accPL[0]) + ',' + str(lastTradePrice) + ',' + str(nextTradePrice),flush=True)
    plSubArray = []
    plSubArray.append(str(nextWindowTime)[0:10] + ' ' + str(nextWindowTime)[10:18])
    plSubArray.append(pl[0])
    plArray.append(plSubArray)

    for x in range(dataSpan, dataLen-1):
        prc = prcDF2[0:x+1]
        trmi1 = trmiDF1[0:x+1][indexname[0]]
        trmi2 = trmiDF2[0:x+1][indexname[1]]
        trmi3 = trmiDF3[0:x+1][indexname[2]]
        ret = asys.getSupervisingData(prc,trmi1,trmi2,trmi3,numDepth,-1)
        lastTradePrice = prcDF2.iloc[x]['lastPrice']
        nextTradePrice = prcDF2.iloc[x+1]['lastPrice']
        lastWindowTime = prcDF2.iloc[x]['windowTimestamp']
        nextWindowTime = prcDF2.iloc[x+1]['windowTimestamp']
        pl = (nextTradePrice - lastTradePrice) * ret
        accPL = accPL + pl
        print (str(nextWindowTime) + ',' + str(ret[0]) + ',' + str(pl[0]) + ',' + str(accPL[0]) + ',' + str(lastTradePrice) + ',' + str(nextTradePrice), flush=True)
        plSubArray = []
        plSubArray.append(str(nextWindowTime)[0:10] + ' ' + str(nextWindowTime)[10:18])
        plSubArray.append(pl[0])
        plArray.append(plSubArray)

print (len(plArray))
profit = 0
loss = 0
for i in range(0,len(plArray)):
    print (str(plArray[i][0]) + ' PL = ' + str(plArray[i][1]))
    if plArray[i][1] > 0:
        profit = profit + 1
    elif plArray[i][1] < 0:
        loss = loss + 1

        
winRate = (profit / (profit + loss)) * 100
print('Winning Rate = ' + str(winRate))


    
